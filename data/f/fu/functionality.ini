# $Id: functionality.ini,v 1.1 2007/07/21 02:39:26 joellimardo Exp $
[GENERAL]
REFRESHSPEED = 2073600
USELIB=%%use lib qw|. ./lib ./lib/auto|;%%
TOADSORT=($a->[1]->{TITLE} cmp $b->[1]->{TITLE})
#remember that a filter is evaled in the XINI object, so param from the CGI object is 
#not normally available.
filter9=($key eq 'CF' && (($column->{SUBBYKEY} = BixChange::_inherit($column,'TITLE')),1))

filter10 =<<EOT
      ($key eq 'CF' 
        && ($column->{TITLE} eq 
              BixChange::_untaint_param('thetitle','(?:\S+\s*)*') ||
            $column->{SUBBYKEY} eq
              BixChange::_untaint_param('thetitle','(?:\S+\s*)*')
           )
               
       )
  
EOT

filter11=($key eq 'CF' && $compkey eq BixChange::_untaint_param('itemcode','(?:\S+\s*)*'))

filter12 =<<EOT
      ($key eq 'CF' 
        && ($column->{TITLE} eq 
              BixChange::_untaint_param('thetitle','(?:\S+\s*)*') ||
            ($column->{SUBBYKEY} eq
              BixChange::_untaint_param('thetitle','(?:\S+\s*)*') && 
              $column->{TITLE} eq
	      BixChange::_untaint_param('subtitle','(?:\S+\s*)*') 

            )
           )
               
       )
  
EOT

[LOOP CF1]
TITLE = Why BixChange?
TEXT =<<ENDOFTEXT
 I wanted to build a flexible system that was fun to work with.
 It is a great kick to create systems using BixChange, mainly because it is fun to solve 
 problems with Perl, BixChange's native language.
 Producing online content and web
 application interfaces from scratch can be a pain. BixChange proceduralizes 
 web development activities and can add cohesiveness to a web project. In a BixChange
 implementation, everything is in a convenient place. Think of the web as an disorganized
 mess and BixChange as a container system designed to house and make content and
 functionality readily accessible for both developers and users.%%_html_ret()%%
 In order to create a working web system you need several things:
 <P>
 <li> A Webserver. BixChange will run on many of them including Apache and IIS
 <li> Interface Templates. Unless you are designing in the stone-age of the web (a few years back
 to be precise) you want your website to have a consistent look and feel. Headers and footers should
 all look similar from page to page; and there should be some consistent color scheme. BixChange
 makes it easy for you to incorporate someone else's web page templates
 into your site quickly.
 <li> Content. This system makes it easy for you to serve content from various sources, including
 databases, CSV files, other HTML files, INI files, and more.
 <li> Business Logic. If you are doing things on the web you will need ways to process information
 from outside users and other systems. It is a good idea to keep this business logic away from and out
 of your interfaces so that you can change find the logic code when you need to change it. BixChange
 fanatically keeps business logic out of the hands of template designers.
 <P>
 %%_html_ret()%%
 This project started as a rewrite of an online shopping cart system. Gradually I recognized that restricing 
 the product 
 to online commerce applications alone was too limiting, so the scope of the product was 
 expanded to encompass
 various types of web content. 
 %%_html_ret()%%
 

ENDOFTEXT

[LOOP CF1.1]
TITLE = Introducing Bixchange
LINKSTO = 001
TEXT=<<EOT
BixChange (<i>pronounced like Big-sh-change</i>) was primarily written in the Perl programming language and 
utilizes popular Perl modules like CGI, HTML::Template, Config::Inifiles, and Text::CSV to name a 
few. It runs in Perl's taint mode which means that all outside data is suspect and treated as 
potentially dangerous until it has been filtered out. When testing out BixChange without a webserver
on the command line you will need to issue the -T flag to perl in order to allow the script to run.
%%_html_ret()%%
There are other conventions that you will need to follow when running BixChange on different systems
and under different webservers. This is because different web servers handle the Perl interpreter 
differently. Apache with mod_perl for instance will require a slightly different setup than will IIS.
Also, when running Apache on Windows you will need to change the shebang (#!) line on all of the scripts 
to point to your installation of perl (typically c:\perl\bin\perl.exe).
EOT
SUBBYKEY=Why BixChange?

[LOOP CF1.2]
TITLE = Intranet and Extranet
TEXT=<<EOD

As with any web application it matters little to the server whether you are running inside of an
intranet or outside of one. BixChange will handle all requests the same, but you may have to spend
more time thinking about security.

EOD
SUBBYKEY=Why BixChange?
[LOOP CF1.3]
TITLE = Dynamic Page Advantage?
SUBBYKEY=Why BixChange?
TEXT=<<EOF


Pages are dynamically rendered using BixChange. This means that content (including coded instructions) are processed in some way, applied to a web template, and then returned to the client's browser.  This process takes time, and is typically slower than static HTML.
<P />
There are serious disadvantages to using HTML.  Firstly, you cannot control the content once it is posted.  It just sits there waiting for a user to select it.  In certain situations this is sufficient, but in most cases you need your pages to act differently under different circumstances.  For instance, if users have a certain cookie on the client side, you may want to present them with special offers.  Static HTML may be able to do many things with JavaScript, but many things simply must be done on the server.
<P />
BixChange can help you regardless of which method you ultimately choose to present your content.  If you insist on publishing static pages, you can simply compile and save your BixChange content and FTP it to your server.  You can keep your JavaScript in separate templates for easy reuse as well. 


EOF
[LOOP CF2]
TITLE = Understanding the World Wide Web

TEXT=<<ENDOFTEXT

The World Wide Web (WWW) is a complex and vast place where people of different cultures meet and 
transmit information to one another. In order to participate in the information sharing you will
need a tool to transmit that data in an orderly fashion. The problem with most such systems
is that they are restrictive. You either have to use a particular database or a specific
operating system or a special webserver in order to get anything to run. BixChange was written
on a Windows machine without any commercial webserver and ported to other operating systems
during testing. It will run virtually anywhere on almost any CGI enabled web server including Apache
and Internet Information Server (IIS).
%%_html_ret()%%
The WWW is evolving daily and requires increasingly powerful tools to manage content and users. Typically,
web content systems fail to be flexible enough to keep up with the changing needs of its users.  Worse,
cryptic languages are developed around and inside of HTML markup language tags with the desire to create
hybridized procedural/markup languages, sort of like procedural Structured Query Language (SQL) used 
in all modern databases. No such standardized markup language exists and as such we have a mess of
embedded scripting solutions that confuse developers and different browsers alike.

ENDOFTEXT

[LOOP CF3]
TITLE = Installing BixChange
TEXT=<<EOF

Installing BixChange may be different depending upon the server you are planning to use and the webserver you will
be running it on. You will require, at a minimum, a webserver that will allow you to run CGI scripts. 

EOF
[LOOP CF4]
TITLE = Administering BixChange


[LOOP CF4.1]
TITLE = FILTERS
LINKSTO = 004

TEXT=<<ENDOFTEXT

INI files contain hierarchical data. If you need (or are used to) relational data than keep all
of your data in databases and use XObjects to fetch it out of them. If you are adventuresome and
like challenges, you will keep some of your data in INI files and write filters to weed out
undesireable data from the user. Actually, filters can do more than weed out undesirable data. They
can add data to the rows of data in your dataset or remove items. Here is an example of a typical
filter:
<P>
($key='qm' && $column->{PHONENUMBER}=~m/^312/)
<P>


ENDOFTEXT

[LOOP CF5]
TITLE = Designing an Application

[LOOP CF5.1]
TITLE = REFRESHSPEED
TEXT =<<ENDOFTEXT
 Refresh speed is normally a parameter sent to the browser telling it when to reissue a request
 to refetch the page. On some browsers it looks like a screen flicker. If you are moving down
 a page when one of these refreshes occurs your page will again return to the top of the page
 if there are no anchors in the Location bar of your browser.

ENDOFTEXT

[LOOP CF6]
TITLE = Database Fundamentals

[LOOP CF7]
TITLE = Creating Databases and Tables versus INI Files
TEXT=<<ENDOFTEXT
In reality, there is no need to make a such a brash distinction between using INI files or databases.
You can use XObjects to select items from a database on one page
and in the next use data from an INI or a CSV file. The choice is yours. Use what feels right to you.  You may,
however, give credence to a few points to remember:
%%_html_ret()%%
<li>The more connections to databases you have the more difficult it will be to manage your system. 
As time
goes by, your access to a particular database may change in some small way. 
On a Windows box, your DSN name may change, for instance. 
The more databases you have,
the more likely this will happen. What happens when someone tries to access your page and
the database connection no longer exists? You guessed it, death page.

<li>Second, database servers need to be maintained. At times they will
not be working and will need to be restarted. If the data you have is not changing frequently
you may consider putting it in a more static form, like an INI file or a CSV.

<p>

INI files are not without their own problems. At the time of this writing you can only filter
the highest level items in a loop. That means your filters will affect items like [LOOP FOOBAR1]
but you will get no output for something like [LOOP FOOBAR1.1].
%%_html_ret()%%
This is because XINI, the XObject which reads INI files places a reference to a subelement in a
loop underneath its parent reference. So, if the parent does not make it into the output, neither
will the child. 
%%_html_ret()%%
A good example is this filter from the main.ini file in BixChange. Here is the filter:
<P>
%% table(Tr(td({-bgcolor=>'#FFCC33'},'filter1 = ($column->{NEWS}=~m/^The world/)'))) %%
<P>
This filter will be applied to each and every loop item in the INI file. The only items that
will be allowed to pass this filter are ones that have a NEWS element that starts with 'The world'.
Nothing else will be allowed out of the XINI object.
%%_html_ret()%%
Now consider if you have an element that is actually a subelement. Your filter is specifically
written to avoid everything except the subelement, even weeding out its parent, like this stinker:
<P>

filter10 =<BR>
...<BR>
      ($key eq 'CF' && $column->{TITLE} eq BixChange::_untaint_param('thetitle','(?:\S+\s*)*'))<BR>
...  <BR>
<P>
In the above example the filter is only interested in loops that look like LOOP CF?, where ? can be any
number. The column TITLE must be equal to a user supplied value that is being passed into BixChange via
CGI. A utility function called _untaint_param is used to clean up the value before use. It is generally
good practice to clean up values before allowing them to be used in your program, particularly in 
evals.

<h4>Performance</h4>

An INI file with lots of data will load into memory each and every time the page is called. This is
generally bad practice, so you have several options.  You can
 break up your data so that one page links to another 
INI file elsewhere. Preferably, you should use your INI file to create lookups in a SQL database using _xloader or by creating database connections yourself.
<P />
In tests, databases performed much better than INI file parsing for large sums of data.  The rule of thumb should be this: large data should be inside or a database; smaller chunks of easy-to-read data should be in INI files.

ENDOFTEXT
[LOOP CF8]
TITLE = Introduction to XObjects

[LOOP CF8.1]
TITLE = INI Files

[LOOP CF8.2]
TITLE = CSV Data

[LOOP CF8.3]
TITLE = SQL

[LOOP CF8.4]
TITLE = XObjects to the Rescue!

[LOOP CF9]
TITLE = SQL Data Manipulation

[LOOP CF10]
TITLE = We don't need no stinkin Studio!
TEXT=<<EOF
  Well, we do and we don't. Typically editors have lots of functions to help you identify and modify programs.  They automatically create supporting files for you.  Unfortunately, this makes you very dependent upon the editor tool.  BixChange, in an attempt to keep the tool free, uses Emacs as its base editor.  <a href="http://www.forwardphase.com/emacs-howto.pdf">The BixChange Emacs-HowTo</a> will help you become familiar with using BixChange with Emacs in either a Linux or Windows environment.

EOF

[LOOP CF11]
TITLE = Basics
TEXT=<<EOP
Before anything you will have to install the product. No database is presumed to be available for the install. That is because BixChange does not require a database in order to run. You could keep all of your data in INI files and skip the database altogether. In fact, for system demos and mockups this is the suggested method. Keep your code in INI files until the client accepts the layout. Then create tables that match the INI node structures and you are in business.
<P />
Second is to look at the files in the ./data/m/ma directory in order. First is main.ini. The others are main1..<some number>. No need to understand them at this point, just look. These are the basic examples of how to use BixChange. From now on, every new piece of functionality introduced to the system will include or add to those examples. As new releases come out, watch for notices that will refer to these files. Reviewing them will greatly shorten your learning curve. I feel these files are somewhat better than perldoc synopsis sections, at least when it comes to BixChange.
<P />
The first thing to understand is that an .INI file has to exist somewhere in the data directory where BixChange was installed. Next you have to know that every file in the data directory is placed two folders from the data directory in folders that coorespond to the first two letters of the file's name. So a file called foo.ini would be in a folder called ./data/f/fo. What happens if you like naming files with single letters? The file a.ini could not be found, so at minimum .INI files must have two letter names.
<P />
Next, you have to know that BixChange .INI files have an expected format. There are only two types of groups (those things in the square brackets) that are technically valid in the INI file -- one is the GENERAL section and the other are LOOPS. You are not required to have any loops but you must have a GENERAL section. See the examples. Loops are explained later in this helpfile. 

EOP

[LOOP CF11.1]
TITLE = Templates

[LOOP CF11.2]
TITLE = Passing Parameters to Templates

[LOOP CF11.3]
TITLE = Don't bother making static web pages

[LOOP CF11.4]
TITLE = Drilling Down, Links The Lead Users to Greater Information Depths

[LOOP CF11.5]
TITLE = Why Frames Suck

[LOOP CF12]
TITLE = BixChange Forms
TEXT=<<EOF
  Forms become important when you would like to build a web application with BixChange or you simply need a few forms to automate customer contact forms.  Whatever your reason, the form itself is easy to set up.
<P />
Let's dissect a sample form (<a href="bixchange.cgi?f=form1;tmpl=form1" target="_blank">Sample</a>).
<P />
Rather than reposting the code here, try opening the data/f/fo/form1.ini and /tmpl/form1.tmpl files in the core installation and take a look at the template (the file ending with .tmpl).
<P />
Inside this file there are tags that start with TMPL_.  These are template tags that HTML::Template, a popular Perl module, uses to identify places to inject data.  In BixChange, these tags map to identities in an INI file.
<P />
Forms in BixChange use loops in INI files in a standardized way.  The form1.tmpl is an example of using a standard form template that has conditions in it, TMPL_IF statements, that will present a different form object depending on some element in the INI file.
<P />
For instance, in the form1.ini file the first entry under the LOOP WEBBY group is LOOP WEBBY1. It has several elements: NAME, DISPLAYNAME, TYPE, LENGTH, VALUE, and an UNTAINT element. The form1.tmpl IF tags are most interested in the RAW element. If it is present <i>and</i> has data in it, only the contents of the CODE element will appear. Othewise, an INPUT tag is placed on the HTML with the other properties taken from the INI group (TYPE, NAME, LENGTH, and the default VALUE.
<P />
A closer look at the other contents of the form1.ini will reveal that TEXTAREAs and other complex HTML form objects are all considered RAW types. This pattern can be followed to create numerous forms. Notice the HIDDEN tags in the form1.tmpl. They send the data back to the form1's INI file and template combination for processing in the ACTION_NUEVO element in the INI files GENERAL section.

EOF

[LOOP CF13]
TITLE = Using Forms to Add or Change Data
TEXT=<<EOP
  Normally you would want to keep data in a database, but in the event that you need to use forms to update the contents of an INI file you can use the current INI object's add() operation as in the /data/m/ma/main10.ini. It works with the /tmpl/azure/main10.tmpl, as in this <a href="bixchange.cgi?f=main10;tmpl=azure/main10" target="_blank">example</a>).
<P />
As you can see, doing things like updating data, calling operations that run operating system utilities, and the like involves programming. <a href="http://www.forwardphase.com">ForwardPhase Technologies</a> offers custom programming for BixChange to make it satisfy your needs.
EOP

[LOOP CF14]
TITLE = Form Data Validation
TEXT=<<EOP
Validating form data is relatively simple with BixChange. The forms themselves are typically contained in INI files with the following keys: NAME, DISPLAYNAME, TYPE, LENGTH, VALUE, and UNTAINT. The UNTAINT key is the most important. The standard way is to 'depollute' the parameters by applying whatever you placed in the UNTAINT key against each value, like so:
<pre>
      my $parent;
      my $xINIRef = BixChange::get_private('PARENT');
      my $depol = $xINIRef->depollute('WBFRM', 
 		    [qw|NAME
			TITLE
			COMPANY 
			ADDRESS 
			ADDRESS2 
			CITY 
			STATE 
			ZIP 
			PHONE 
			PHONE1 
			PHONE2 
			FAX 
			FAX1 
			FAX2 
			EMAIL 
			WEBSITE|]);
	if ($depol){
        ....
        }
     
</pre>
In the above example $depol will be filled with a hash of values that are no longer tainted. Why? Because the regular expression specified in the UNTAINT element was sufficient to extract what was needed.

       
EOP
[LOOP CF15]
TITLE = Debugging and Trouble Shooting
TEXT=<<EOF
  There are several ways to troubleshoot problem in BixChange. They are:
<P />
<ul>
<li>Turn on logging</li>
<li>Change the error messaging in your INI files</li>
<li>Manually debug</li>
</ul>
<P />
By far, the last method is the most difficult.  As for turning on logging, there is a configuration item in the BixConfig.pm called BXTRACEFILE.  It is set to a filename called bxtracefile.txt.  The configuration item immediately above it, BXTRACE, if set to a true value (> 0) will force log entries at various points inside of BixChange.  Open bixchange.cgi and look for BXTRACEFILE. Backup bixchange.cgi and copy those lines to any function that is causing trouble.  Then call a page and open the log file.  Repeating this process will isolate the offending function.  Then you can use debugging or some other method to discover the actual problem.
<P />
If the problem exists in an evaluate section of an INI file, simply call the standard Perl die() function at several places inside of the code to isolate the problem. When a die() is encountered in the evaluated sections of an INI file, the error message appears directly in the browser.
<P />
Debugging involves a knowledge of the Perl command line debugger (unless you have a graphical one). Such a thing is a bit beyond this guide, but the things to remember if you go down this route are as follows:
<P>
<ul>
<li> The best place to debug code in INI files is in the _convert_data() function in bixchange.cgi</li>
<li>General INI problems may be explained by a debugging of XINI::parse_to_structure()</li>

</ul>
EOF

[LOOP CF16]
TITLE = Advanced Bixchange?
TEXT=<<EOF
  More sophisticated things can be done in BixChange other than simply creating INI files and using simple templates. Recent uses that have needed more comprehensive solutions (modules, etc.) have included:
<ul>
<li>A software support knowledgebase which uses only four templates, two INI files, and one cascading style sheet with an Oracle database.</li>
<li>A software project incident management system</li>
<li>A weblog</li>
</ul>
For solutions iike the above, speak to a technical representative at <a href="http://www.forwardphase.com">ForwardPhase</a> for more details.
EOF

[LOOP CF17]
TITLE = Where can I put my stuff, dude?
TEXT=<<EOF
  All files should have a 'place' in Bx. If it is an INI file it belongs somewhere in the directories under /data. If it is some other kind of file it also needs to be in /data/_<a type>. Templates all must be under /tmpl. XObjects go under /lib. Modified CPAN modules go under /lib/cpan. Check the standard install for more examples of where things ought to go.

EOF
[LOOP CF18]
TITLE = Advanced BixChange Templates
TEXT=<<EOP
  The correct way to design templates in BixChange is to plan out the design before hand and try to implement your pages in regions.  Your page regions can exist in other templates that can be included using the TMPL_INCLUDE tag or by using TMPL_IF blocks. TMPL_IFs are great for changing an existing template to accomodate a new regions.
EOP
[LOOP CF19]
TITLE = Advanced forms? Why do we need more form tools?
TEXT=<<EOF
  The use of filters in combination with forms offers a way to provide the necessary fields while ignoring others. You could tag all fields in Form A with one element in the INI file, and another for other form fields. Then you can use filters to show a particular set of fields depending on the user's choice.
<P />
Consolidating the number of forms in an application can greatly reduce its complexity, especially if the forms are doing similar things.
<P />
Other more advanced uses of forms would include reading the field information from a relational database depending on passed-in parameters.
<P />
As you can see, most of the work in BixChange is done by very simple and reusable tools and patterns. There is little need to create a new toolset to accomplish advanced tasks -- just more diligent use of existing structures (INIs, XObjects,and databases).

EOF
[LOOP CF20]
TITLE = Interacting with Email
TEXT=<<EOF
  This will depend on how you send e-mail, but the method is very similar in all cases and not unique to BixChange.  Perl offers lots of different methods for both sending and reading e-mail.  The most common program for sending SMTP (Simple Mail Transport Protocol) mail is the Net::SMTP module.  Otherwise, if you are on Windows, you can use the Win32 module or others to access Outlook or CDO classes for sending mail.
EOF

[LOOP CF21]
TITLE = Online Commerce
TEXT=<<EOP
  BixChange includes facilities to build customized, session-based solutions for online shopping carts and web based commerce systems.
<P />
<a href="bixchange.cgi?f=store;tmpl=store" target="_blank">A simple example</a> shows how easy this is to set up.  Interfaces with payment gateways is forthcoming.

EOP

[LOOP CF22]
TITLE = Transaction Processing
TEXT=<<EOP
  With BixChange, transactions typically take place in the database.  As an application developer using BixChange, your biggest issues in this regard will be a) which database to use to achieve transactions (some do not support them) and b) how to ensure that you do not have a 'dirty read'. With a dirty read, the data originally sent from BixChange will have been changed by another user or process prior to the update. Here is an example:
<P />
<ul>
<li>User A reads 100 from a table that he intends to update to 105</li>
<li>User B updates the original 100 to 108</li>
<li>User A then updates the value to 105</li>
</ul>  

The net result? User B's values are overwritten.  In order to avoid this, timestamps can be used in the database.  These timestamps can be returned with the original data at a row level, indicating the last time the data has been updated.  When a new update request is issued, the timestamps passed in can be checked. If they are not the same, the data has been updated and those rows can be returned to the user for further modification.
<P />
There are important reasons to think carefully through locking procedures in BixChange. Here is an article on the subject specific to locking <a href="http://modperlbook.org/html/ch20_01.html#pmodperl-CHP-20-ITERM-5407" target="_blank">databases under mod_perl</a>.

EOP
[LOOP CF23]
TITLE = Web Appication Framework
TEXT=<<EOP
  BixChange is a web application framework. If offers a way to separate content from the formatting necessary to make that content available to various consumers, particularly browsers.  It is also a content management system, because you could keep all of your information in INI files without a database.  Doing this allows a web designer the flexibility to work as much as possible with layout and the customer's changing needs.  Once a final design is identified and most of the data requirements are understood using the pure INI file prototype, a software engineer can then be called. <a href="http://www.forwardphase.com">ForwardPhase Technologies</a> would like to provide BixChange programming services, and as such has released BixChange as a free, open source toolkit for everyone to use and redistribute.
 
EOP
[LOOP CF23.1]
TITLE = Addressing the Web's Statelessness

[LOOP CF24]
TITLE = Session Variables and Cookies
TEXT=<<EOF
  All cookies, if received, are stored in $bix{'PRIVATE' . $bix{'uniqRUN'}}->{'USERCOOKIES'} which is captured every time another resource is requested from BixChange. Individual applications designed with BixChange simply use that or the conventional CGI::Cookie module to retrieve cookies passed in by the user.  Cookies are great, but they have a limited amount of information that can be stored in them. Furthermore, different browsers do not share cookies, so if you have an application that requires the user to open a special browser due to plugin restrictions or other incompatibilities, they will lose access to all of the cookie data for the previous session.
<P />
Session control is typically handled server-side using CGI::Session. BixChange comes with functions to handle sessions that utilize files for storage (inititiate_session() particularly).

EOF


[LOOP CF25]
TITLE = File Manipulation
TEXT=<<EOF
  Files are easy to manipulate in Perl, BixChange's native language. All that is needed is an <pre>open(HANDLE,"filename.txt") or die $!</pre> type of command to accomplish this.  Perl also has methods for file locking (flock()), which are easy to use and understand. File handles can be opened, manipulated, shared between function calls, and more. Please refer to standard Perl documentation for file manipulation techniques.

EOF


[LOOP CF26]
TITLE = Full Text Searching with File::Find
TEXT=<<EOF
  There are other ways to search for files, particulary using grep, but if you want a Perl way, you can use the File::Find module. The utils.pl script which comes with BixChange uses File::Find to locate certain tags that should exist in certain INI files to create an index.  For an example, use <pre>perl utils.pl --index</pre>
EOF

[LOOP CF27]
TITLE = Directory Services like LDAP
TEXT=<<EOF
  The Perl community has its own methods to access LDAP servers via <a href="http://ldap.perl.org/" target="_blank">Perl-LDAP</a>. You can typically implement an interface to request general information from these servers if you are planning to use BixChange in a large corporate environment. Anything from user authentication to e-mail lookups can be done with LDAP, depending on how the LDAP servers are being configured and what information in being stored in them.
<P />
Normally solutions in BixChange are simply implemented with file-level access control. BixChange has the _validate_user() function which compares a passed-in username, password, and filename to be used instead of LDAP. The password files typically look as follows:

<pre>
[GENERAL]
REFRESHSPEED=9999999

[LOOP USERS1]
NAME=MAXXO
PASSWORD=ThUrTgvMWwwbI
</pre>

Passwords are encrypted using Perl's crypt function.  In order to create a new password, using BixChange's configured salt (which you can change in BixConfig), use the utils.pl password function, as follows:
<pre>
perl utils.pl --password newpassword
zmnU1Cg0f4teo
</pre>
If you are really interested in securing the user's identity you will accept the user's password via a secure (SSL) session, capturing the user's password and issuing them a unique session key via CGI::Session.
EOF
[LOOP CF28]
TITLE = Mime Types...Hack the Planet (or at least core BixChange Objects!)

[LOOP CF29]
TITLE = Graphing with GD!

[LOOP CF30]
TITLE = XObjects for HTTP/FTP/GOPHER/WAIS and Anything Else You Can Think Up

[LOOP CF31]
TITLE = Version Control with CVS
TEXT=<<EOT

As it turns out, keeping all INI files in some form of version control is not a bad idea. I personally
use CVS (Concurrent Versioning System) for Windows to maintain all of the files under the standard
BixChange source distribution that are worth storing in version control. That is, all of the files
that are not in the underscore files in the data directory.
<P>
 

EOT
[LOOP CF32]
TITLE = Event Scheduling with CRON or Some Bogus Windows Tool

[LOOP CF33]
TITLE = Hah, hah, hah...Custom Tags!?!?

[LOOP CF34]
TITLE = Interfacing with COM and DCOM

[LOOP CF35]
TITLE = The BixChange API

[LOOP CF36]
TITLE = If You Want a Function Reference, Use PerlDoc Already
