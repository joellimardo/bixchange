#
[GENERAL]
PAGETYPE=FORM
META-DESCRIPTION=Functional Requirements
META-STARTLINK=%%$bix{'systemname'}%%?f=funcreqs
META-NAME=Functional Requirements
META-KEYWORDS=BixChange Requirements

PAGETYPE=FORM
VERSION=1.8b
INTRODUCTION=<<EOF

This document describes the BixChange Web Application Framework System. This project started out as an idea to separate content from formatting noise using commonly available tools available on the internet. It grew into a system that allows for the naming of data elements and separation code in a semantic fashion. Thus, BixChange has become a design tool for testing out various theories about web application development.
A major aim of the system is to maintain a system that can be run via the Common Gateway Interface, or CGI, as well as via faster and more efficient platforms such as mod_perl on either Windows on Linux.

This system is designed to not only make text easier to manipulate by separating it from template artifacts (HTML/XML tags, for instance), but from a software design perspective, it names blocks of code, making them easier to map to requirements to them after rapid prototyping.

The paramount goals of the system were to achieve the goals of speed and terseness in design and prototyping. This led to the use of the Perl language to provide a base for the system. Perl is widely used for scripting on Linux/Unix type systems for system administration. Its speed and reliability has been (and continues to be) proven in corporate environments everywhere by system administrators.

EOF

OVERVIEW=<<EOF
Product Description
Product functional capabilities
User characteristics
User operations and practices
General constraints
Assumptions
Other Software (interactions)

EOF

#Product Description
PROC_DESC=<<EOP
This product is designed to facilitate prototyping, testing, and development of web-based systems.

EOP

#External Interfaces
EXTERNS=<<EOF
User Interfaces
Hardware Interfaces
Software Interfaces
Communication Interfaces

EOF

#Performance

PERFORM=<<EOF
Response times, throughput requirements, data volume, maximum data file size, problem complexity, max concurrent users, peak load reqs. 

EOF

#Design Constraints

#Attributes
ATTRIBS=<<EOF
Performance, Scalability, Extensibility, Availability, Performance
Configuration and Compatibility
Installation
Usability

EOF
#Additional Requirements
ADDITIONAL=<<EOF
Database
Administration
Other requirements

EOF

[TEMPLATE REQUIREMENT]
REQ=1

#Specific Function Descriptions

[LOOP REQUIREMENT1]
REQ=The system shall provide web accessibility for information.

[LOOP REQUIREMENT1.1]
REQ=Users shall be able to access this content via a standard web browser.

[LOOP REQUIREMENT1.2]
REQ=The data may be gathered from a database.

[LOOP REQUIREMENT1.3]
REQ=The data may be from various data sources.

[LOOP REQUIREMENT2]
REQ=The system shall provide for prototyping of web systems specified in Requirement 1 without a database.

[LOOP REQUIREMENT2.1]
REQ=The content may be stored in human-readable, formatted text files.

[LOOP REQUIREMENT2.2]
REQ=The text files will be formatted so that a non-technical web developer can utilize them for prototyping purposes.

[LOOP REQUIREMENT3]
REQ=The system shall provide the ability to separate data from interface code.

[LOOP REQUIREMENT3.1]
REQ=The system shall provide the ability to utilize the same data source with various interfaces or templates.

[LOOP REQUIREMENT3.2]
REQ=The system shall allow for multiple data sources to be used with a single interface template.

[LOOP REQUIREMENT3.3]
REQ=The system shall allow for one template to be included in another.

[LOOP REQUIREMENT4]
REQ=The system shall allow for executable code to be placed within the body of text for any given web page.

[LOOP REQUIREMENT5]
REQ=The system shall provide the ability to return an XML file for each data source.

[LOOP REQUIREMENT6]
REQ=The system shall provide the ability to filter and sort records returned to the user.

[LOOP REQUIREMENT7]
REQ=The system shall provide the ability to cache session-specific information regarding the user's session on the server.

[LOOP REQUIREMENT8]
REQ=The system shall provide the ability to disallow the user to view secure content.

[LOOP REQUIREMENT8.1]
REQ=The system shall provide the ability to verify users by usernames and passwords.

[LOOP REQUIREMENT8.2]
REQ=The system shall be able to maintain common password files for different modules to utilize.

[LOOP REQUIREMENTS8.3]
REQ=The system shall maintain passwords in password files in an encrypted form.

[LOOP REQUIREMENT8.3]
REQ=The system shall be able to maintain different password files for different modules to utilize.

[LOOP REQUIREMENT9]
REQ=The system shall be able to utilize a server only capable of the CGI protocol.

[LOOP REQUIREMENT10]
REQ=The system shall allow an administrator to redirect users to a different resource.

[LOOP REQUIREMENT11]
REQ=The system shall require the ability to capture error messages for display in the browser.

[LOOP REQUIREMENT11.1]
REQ=The system shall require the ability the log error messages in a log file.

[LOOP REQUIREMENT11.2]
REQ=The system shall require the ability to log accesses to the system in a log file.

[LOOP REQUIREMENT11.3]
REQ=The system shall require the ability to create a configurable error message template.

[LOOP REQUIREMENT12]
REQ=The system shall operate in both Windows and Linux environments.

[LOOP REQUIREMENT13]
REQ=The system shall provide the ability to describe the modules present on a particular instance of a server and their entry points.

[LOOP REQUIREMENT14]
REQ=The framework system will be small enough to be able to deploy it quickly to servers.