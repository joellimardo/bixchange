[GENERAL]
PAGETYPE=FORM
VERSION=1.1
SLOGAN=Communication for everyone, all the time, everywhere...
LSORT=($a->[1]->{'TESTID'} <=> $b->[1]->{'TESTID'})

SHOW=<<EOF
   %%
   use lib qw|. ./ ./lib/auto|;
   my ($re) = BixChange::param('sessionid');
   my ($retline) = qq||;
  
   $retline =  BixChange::_bxstore('theline', join '<br />',(keys %bix));
   
   #$retline .= '<BR />FROM GENERAL: ' . (defined BixChange::_bankpeek('TODDINGSWORTH'))||'';
   $retline .= BixChange::_bankpeek('TODDINGSWORTH')||'NON';
   
   $retline .= '<BR />TIME: ' . localtime(); 
   BixChange::_htendl("this is a test\n");
   %%
   @{[BixChange::bixtest()]}
EOF

NORMALVALUE=1000
TOTALLOADER=<<EOF
 %%
    BixChange::_bankpeek_general('RANSACK'=>'Welcome to the BixChange Test Suite',
                                 'PARTYMAN'=>'Run those tests that are appropriate for your environment. Log errors on the project page at SourceForge (under Bugs)');
 %%
EOF


[TEMPLATE TEST]
TESTID=
TARGETPLATFORM=
PURPOSE=
INPUT=
EXPLANATION=
CODE=
EXPECTEDOUTPUT=
FULFILLSREQS=

[LOOP TEST1]
TESTID=1
TARGETPLATFORM=ALL
PURPOSE=Show that e-mail munger works
INPUT=None, runs automatically.
EXPLANATION=<<EOF
   The e-mail address should be encased in a random number of SPAN tags. Technically you could use a regex to extract this,  but the guess is that a spammer's toolkit would find it hard to differentiate this from standard HTML and as such would bypass it.
EOF
CODE=<<EOF
  %%
     BixChange::email_munger('vbscript_sorta_works@hotmail.com');
  %%
EOF
EXPECTEDOUTPUT=vbscript_sorta_works@hotmail.com
FULFILLSREQS=

[LOOP TEST2]
TESTID=2
TARGETPLATFORM=ALL
PURPOSE=Test Universes (DIRECTORY mode)
INPUT=Link
EXPLANATION=Universes require either a 
CODE=<a href="bixchange.cgi?f=helloworld;tmpl=helloworld;pkg=test-v0.1" target="_blank">Click Here</a>
EXPECTEDOUTPUT=A new page will open with the word "WORLD" on it.

[LOOP TEST3]
TESTID=3
TARGETPLATFORM=ALL
PURPOSE=Test Universes (TAR mode)
INPUT=Link
EXPLANATION=Universe resources read from a TAR need tar.exe to be installed on the given machine AND the path (look at the top of the bixchange.cgi file) to be modified to include its path.
CODE=<a href="bixchange.cgi?f=helloworld;tmpl=helloworld;pkg=test-v0.3" target="_blank">Click Here</a>
EXPECTEDOUTPUT=A new page will enter with the words, "HELLO WORLD" on it.

[LOOP TEST4]
TESTID=4
TARGETPLATFORM=ALL
PURPOSE=Test POM Link Redirection
INPUT=Link
EXPLANATION=POM (Project Object Model) files exist in the /DOCS directory as .xml files that you can place links into. If you compile them (utils.pl --dbmlinks=&lt;FILENAME&gt; ) you can use link redirection.
CODE=<a href="bixchange.cgi?pom=bixchange;iid=0001" target="_blank">Click Here</a>  
EXPECTEDOUTPUT=The main BixChange start page will appear.

[LOOP TEST5]
TESTID=5
TARGETPLATFORM=Windows
PURPOSE=Run .NET assembly via Win32::OLE and COM compatibility layer 
INPUT=Link (to main12.ini mainly)
EXPLANATION=You'll need an assembly in your GAC named HelloDot with a class of HelloWorld (see the /bin directory for class files). HelloWorld will need a function called returnHello(). If you don't want to bother with all of that, just modify main12.ini to point to an existing asembly/class/method.
CODE=<a href="bixchange.cgi?f=main12;tmpl=azure/main12" target="_blank">Click Here</a>  
EXPECTEDOUTPUT=A new page will appear with the words "Hello from DOT NET".

[LOOP TEST6]
TESTID=6
TARGETPLATFORM=ALL
PURPOSE=Set/Get private
INPUT=Link
EXPLANATION=With BixChange 1.8b we have better segregation of user data that is needed for the Apache::Registry environment. Private information is not only user specific, it run-specific. The information in PRIVATE is extinguished each time a requestor is done with her/her/its operation.
CODE=<a href="bixchange.cgi?f=main14;tmpl=main13" target="_blank">Click Here</a>  
EXPECTEDOUTPUT=A new page will open with the number "10000" on it.

[LOOP TEST7]
TESTID=7
TARGETPLATFORM=ALL
PURPOSE=Test the GET_RUNID() function
INPUT=Link
EXPLANATION=More Apache::Registry stuff. This test shows the unique runid of every request to the system. Hit the refresh button on the page that appears to verify that the number changes with each request.
CODE=<a href="bixchange.cgi?f=main13;tmpl=main13" target="_blank">Click Here</a>  
EXPECTEDOUTPUT=A unique runid will appear with every request on the launched browser page.

[LOOP TEST8]
TESTID=8
TARGETPLATFORM=ALL
PURPOSE=Test a general parameter override function
INPUT=Link
EXPLANATION=General parameters in resource filess (INI files) contain key, value pairs. The values can be overridden by code. This functionality has been largely replaced with bankpeek methods, but should be tested anyway.
CODE=<a href="bixchange.cgi?f=main2" target="_blank">Click Here</a>  
EXPECTEDOUTPUT=A page will launch with 600 on the left top side.

[LOOP TEST9]
TESTID=9
TARGETPLATFORM=ALL(w/CGI::Cookie module)
PURPOSE=Test cookies
INPUT=Link
EXPLANATION=browser cookies are set using a function (_newcookie) that basically feeds CGI::Cookie. 
CODE=<a href="bixchange.cgi?f=main9;tmpl=main9" target="_blank">Click Here</a>  
EXPECTEDOUTPUT=A page will launch and show just the standard template at first. Hit refresh and the header will change to the cookie contents (ikoiko, ionix, etc.)

[LOOP TEST10]
TESTID=10
TARGETPLATFORM=ALL
PURPOSE=Updating Resource Files
INPUT=Link
EXPLANATION=<<EOF
  This actually tests several things. First, it gets an object which is stored by the XINI object as it parses INI files, the PARENT object. It then runs INI's depollute() function which cleans out lots of user variables according to untaint keys in a form stored inside of the resource file itself. The it adds new elements to the resource file.
EOF
CODE=<a href="bixchange.cgi?f=main10;tmpl=azure/main10" target="_blank">Click Here</a>  
EXPECTEDOUTPUT=A page with a small form with two fields will appear. Everything entered into the fields (after you hit the submit button) will be appended to the page.

[LOOP TEST11]
TESTID=11
TARGETPLATFORM=ALL
PURPOSE=Multi-File Resource Test
INPUT=Link
EXPLANATION=You can include multiple resource files by using the f# parameter names.
EXPECTEDOUTPUT=Scroll all the way down the page to the end, past the separator line, and see numbers starting at "9000".
CODE=<a href="bixchange.cgi?f=main&f1=main3&tmpl=main3" target="_blank">Click Here</a>

[LOOP TEST12]
TESTID=12
TARGETPLATFORM=ALL
PURPOSE=File Locking
INPUT=
EXPLANATION=
CODE=
EXPECTEDOUTPUT=

[LOOP TEST13]
TESTID=13
TARGETPLATFORM=ALL(w/CGI::Session module)
PURPOSE=Messaging Subsystem
INPUT=Link
EXPLANATION=The following tests use BixChange as a messaging subsystem. The first link writes to a generic, server-side resource and the second reads. Note: The output here is in XML so your browser may experience some strangeness in rendering the output. Try and show the actual HTML with your browser if you expeience this. 
CODE=<a href="bixchange.cgi?f=main6;tmpl=poptest;message=90000" target="_blank">Write Message</a>&nbsp;|&nbsp;<a href="bixchange.cgi?f=main7;tmpl=poptest" target="_blank">See Message</a>&nbsp;|&nbsp;<a href="#">???BroadCast Message???</a>
EXPECTEDOUTPUT=The first link will show you a session id and the OK message. The second will read "90000" inside of an XML wrapper.

[LOOP TEST14]
TESTID=14
TARGETPLATFORM=ALL
PURPOSE=bixchange.xml.cgi
INPUT=Link
EXPLANATION=BixChange's XML interface allows for access to loops available inside of resources. This allows one to build remote applications via calls to special resources. Note: The output will be, unsurprisingly, XML.
CODE=<a href="bixchange.xml.cgi?f=index" target="_blank">Click Here</a>
EXPECTEDOUTPUT=The index.ini file will be represented as an XML document with the keys transformed into tags.

[LOOP TEST15]
TESTID=15
TARGETPLATFORM=ALL(w/Apache 2.0 Mod_Perl)
PURPOSE=Basic Persistence Test
INPUT=Link
EXPLANATION=Persistence only works with Mod_Perl's Apache::Registry module. Click on the first link to store something for general use and hit refresh to watch it continue to append information to it.
CODE=<a href="bixchange.cgi?f=main23;tmpl=main19" target="_blank">Click Here To Add</a>&nbsp;|&nbsp;<a href="bixchange.cgi?f=main24;tmpl=main19" target="_blank">Click Here To Delete</a>
EXPECTEDOUTPUT=Information will keep appending to list.

[LOOP TEST16]
TESTID=16
TARGETPLATFORM=ALL(w/Apache 2.0 Mod_Perl)
PURPOSE=Cleanup Variables
INPUT=
EXPLANATION=Show that no other data is being left over after invocations/calls.
CODE=
EXPECTEDOUTPUT=

[LOOP TEST17]
TESTID=17
TARGETPLATFORM=ALL(w/CGI::Session module)
PURPOSE=Verify User
INPUT=Link
EXPLANATION=Usernames and passwords should be passed only once via a secure connecton. From then on, all access is controlled via a session token. 
CODE=<a href="bixchange.cgi?f=main19;tmpl=main19" target="_blank">Click Here</a>
EXPECTEDOUTPUT=This test will fail on purpose. The launched screen will tell you that the supplied password is incorrect.

[LOOP TEST18]
TESTID=18
TARGETPLATFORM=ALL(w/CGI::Session module)
PURPOSE=Verify User (Pass Test)
INPUT=Link
EXPLANATION=Correct username/passwords will result in a returned session_id.
CODE=<a href="bixchange.cgi?f=main22;tmpl=main19" target="_blank">Click Here</a>
EXPECTEDOUTPUT=The launched screen will show a session id.

[LOOP TEST19]
TESTID=19
TARGETPLATFORM=ALL(w/Mod_Perl Apache::Registry)
PURPOSE=Memory Leak
INPUT=Link
EXPLANATION=All Apache::Registry scripts are responsible for cleaning up after themselves. This means that variables that reference structures must be deleted from memory or they will stick around after their original invocation.
CODE=<a href="bixchange.cgi?f=helium;tmpl=helium" target="_blank">Click Here</a>
EXPECTEDOUTPUT=There should be only one set of PRIVATE variables if there is only one session connecting/running against the server.

[LOOP TEST20]
TESTID=20
TARGETPLATFORM=ALL
PURPOSE=Resource (INI) file inheritance
INPUT=Link
EXPLANATION=Sometimes you want to inherit (or copy) an element from the GENERAL section into a particular loop element.
CODE=<a href="http://localhost/cgi-bin/bixchange/bixchange.cgi?pom=help;iid=more;thetitle=Why%20BixChange?&subtitle=Introducing%20Bixchange" target="_blank">Click Here</a>
EXPECTEDOUTPUT=One of the pages of the developer's guide that has a filter which uses the inherit functionality will appear.

[LOOP TEST21]
TESTID=21
TARGETPLATFORM=ALL(w/DBI and DBD::SQLite)
PURPOSE=Access SQLite database for create/read/write/modify
INPUT=Link
EXPLANATION=Using DBI w/BixChange is as easy as calling it elsewhere in Perl. In a Mod_Perl environment you can make the database handle persistent and work against it.
CODE=
EXPECTEDOUTPUT=

[LOOP TEST22]
TESTID=22
TARGETPLATFORM=ALL
PURPOSE=CSV TEST
INPUT=
EXPLANATION=
CODE=
EXPECTEDOUTPUT=

[LOOP TEST23]
TESTID=23
TARGETPLATFORM=Form Test
PURPOSE=Test forms
INPUT=Link
EXPLANATION=Launches the standard form test.
CODE=<a href="bixchange.cgi?f=form1;tmpl=form1" target="_blank">Click Here</a>
EXPECTEDOUTPUT=A form will appear with many popular HTML form elements (radio boxes, text fields, etc.)

[LOOP TEST24]
TESTID=24
TARGETPLATFORM=Concurrency Test
PURPOSE=Run Apache2's concurrency utility
INPUT=Link
EXPLANATION=Run this on your command line: "ab -n 5 -c 5 http://localhost/cgi-bin/bixchange/bixchange.cgi" without the quotes in the Apache2/bin directory.
CODE=N/A (Allowing this to be run on the target server may cause problems as this test is resource intensive. Test on non-production server.)
EXPECTEDOUTPUT=There should be no errors and the performance should match your expectations given how your application was configured/built. A good control is to run your application against standard HTML pages. 

[LOOP TEST25]
TESTID=25
TARGETPLATFORM=ALL
PURPOSE=Test tied variables
INPUT=Here
EXPLANATION=Some variables are tied
CODE=<<EOF
   %%
    stop_break();
    $BixChange::USESESSIONS+=9;
    BixChange::initiate_session(); 
    $BixChange::SESSIONID;
   %%
EOF
EXPECTEDOUTPUT=You should see a session id (a new one if you are not passing a sessionid parameter).

[LOOP TEST26]
TESTID=26
TARGETPLATFORM=ALL
PURPOSE=RunId is unique across different sessions
INPUT=Link
EXPLANATION=The uniqRUN entry in the %bix hash is unique for every invocation of the script. This can be shown by using Scalar::Util::refaddr to see the references address. The first link will open a new connection and sleep for five seconds. That will give you enough time to click on the second link and see that uniqRUN's address. Compare the two when the first process finishes. They will be different (Note, running the same test for PERSIST will show that reference stays the same for all invocations).
CODE=<a href="bixchange.cgi?f=main28;tmpl=main19" target="_blank">Click Here (Sleeps)</a>&nbsp; <a href="bixchange.cgi?f=main29;tmpl=main19" target="_blank">Click Here Quickly</a>
EXPECTEDOUTPUT=You should see a session id (a new one if you are not passing a sessionid parameter).

[LOOP TEST27]
TESTID=27
PURPOSE=Are we in Mod_Perl?
TARGETPLATFORM=ALL
INPUT=Here
EXPLANATION=Checks the MOD_PERL environment variable.
EXPECTEDOUTPUT=If you are running mod_perl, you will see something there. If not, you will not.
CODE=%%($ENV{'MOD_PERL'})%%