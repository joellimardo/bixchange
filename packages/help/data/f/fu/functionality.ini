# $Id: functionality.ini,v 1.1 2007/07/21 02:39:26 joellimardo Exp $
[GENERAL]
REFRESHSPEED = 2073600
USELIB=%%use lib qw|. ./lib ./lib/auto|;%%
TOADSORT=($a->[1]->{TITLE} cmp $b->[1]->{TITLE})
#remember that a filter is evaled in the XINI object, so param from the CGI object is 
#not normally available.
filter9=($key eq 'CF' && (($column->{SUBBYKEY} = BixChange::_inherit($column,'TITLE')),1))

filter10 =<<EOT
      ($key eq 'CF' 
        && ($column->{TITLE} eq 
              BixChange::_untaint_param('thetitle','(?:\S+\s*)*') ||
            $column->{SUBBYKEY} eq
              BixChange::_untaint_param('thetitle','(?:\S+\s*)*')
           )
               
       )
  
EOT

filter11=($key eq 'CF' && $compkey eq BixChange::_untaint_param('itemcode','(?:\S+\s*)*'))

filter12 =<<EOT
      ($key eq 'CF' 
        && ($column->{TITLE} eq 
              BixChange::_untaint_param('thetitle','(?:\S+\s*)*') ||
            ($column->{SUBBYKEY} eq
              BixChange::_untaint_param('thetitle','(?:\S+\s*)*') && 
              $column->{TITLE} eq
	      BixChange::_untaint_param('subtitle','(?:\S+\s*)*') 

            )
           )
               
       )
  
EOT

[LOOP CF1]
TITLE = Why BixChange?
TEXT =<<ENDOFTEXT
<p>
I originally wrote BixChange around 2002 while working on an enterprise laboratory information management system deployment. Deadlines were tight and most of the staff was unfamiliar with the target system. My role as a senior consultant was to convert requirements into a functional, validated system all while dealing with user, tester, and management information requests. Exhausted, near the breaking point, I realized that I needed several things:
</p>
<ul>
<li>A way to <i>uniquely</i> publish data -- test server IPs, proper formats (DTD/schema/API info.) for imports/exports, etc. -- while working on other things.</li>
<li>Minimize time for code reviews by publishing code snippets as 'models'.</li>
<li>Publish notable anomalies found during log file analysis without having a special meeting about them.</li>
<li>Make grouped, unique key/value stores available to anything that needed them.</li>
<li>More...</li>
</ul>
<p>
Essentially rather than serving every customer individually I needed a 'buffet' where they could search for the information they needed on their own and get back to work.
</p>
<p>
I thought to use one of the numerous wiki tools available but many were fairly bloated and the smaller ones underpowered. A small footprint, lightweight, and easily maintainable were key characteristics. If I needed other developers to edit the online information there was no time to worry about access control lists and permissions. I wanted to simply send them a file to update and send back for publication. With these thoughts in mind I produced BixChange.</p>

<p> BixChange is basically a CGI application framework with an architecture that facilitates composability. Project managers that believed in team 'project folders' were one step removed from reality. As projects get beyond initiail kickoff stage documentation is of secondary importance so it erodes until it is nigh unusable. With BixChange regular interactions between developers and QA staff take the form of structured communication. 
</p>


ENDOFTEXT

[LOOP CF1.1]
TITLE = Introducing Bixchange (Technical Description)
LINKSTO = 001
TEXT=<<EOT
<p>BixChange (<i>pronounced like Big-sh-change</i>) was primarily written in the Perl programming language and 
utilizes old, familiar modules like CGI, HTML::Template, Config::Inifiles, and Text::CSV to name a 
few. It runs in Perl's taint mode which means that all outside data is suspect and treated as 
potentially dangerous until it has been filtered out. When testing out BixChange without a webserver
on the command line you will need to issue the -T flag to perl in order to allow the script to run.</p>
<p>
The system was originally written for Windows versions of Perl but it is now maintained for Linux environments thanks to the ability to build an run a server in VirtualBox or some similar virtualized environment and expose it to the network.  As a web framework it needs a web server with CGI enabled in order to run. </p> 
<p>
There are other conventions that you will need to follow when running BixChange on different systems
and under different webservers. This is because different web servers handle the Perl interpreter 
differently. Apache with mod_perl for instance will require a slightly different setup than will Nginx.
Also, when running different version of Perl you will likely need to change the shebang (#!) line in bixchange.cgi 
to point to your installation of perl (for instance, /opt/perlbrew/perls/5.36.0).</p>
EOT
SUBBYKEY=Why BixChange?

[LOOP CF1.2]
TITLE = Intranet and Extranet
TEXT=<<EOD

<p>You should always act as if your application is exposed to unexpected users and secure everything as much as possible. That being said, 99% of BixChange implementations are done on the Intranet, particularly on some server no one is using that you can add Apache or Nginx on without anyone bothering you.</p>
<p>
All inputs should be subjected to BixChange::_untaint_param() even when you would rather simply call CGI's param(). Since this application will eventually be moving to PSGI you should not expect to have CGI available in the future. BixChange's _untaint_param() will call the necessary module in the available environment.
</p>
<p>
When it takes less time to model a solution in BixChange than it takes to explain what you want to a third party you will understand why this system is so useful.
</p>

EOD
SUBBYKEY=Why BixChange?
[LOOP CF1.3]
TITLE = Dynamic Pages
SUBBYKEY=Why BixChange?
TEXT=<<EOF

<p>Pages are dynamically rendered using BixChange. This means that content (including coded instructions) are processed in some way, applied to a web template, and then returned to the client's browser.  This process takes time, and is a lot slower than static HTML.
</p>
<p>
Since this tool is used primarily by smaller teams performance is rarely cited as an issue. When teams get a bit larger you might want to consider moving the most popular content to static pages/JSON on the server.
</p>
<p>Static HTML is great performance-wise. Webservers are optimized to cache static web pages and can transmit them to browsers with fantastic speeds. Exporting content on the server side and then using a site rendering engine like <a href="https://metacpan.org/pod/Mira" target="blank">Mira</a> is recommended for high-traffic content. You can have your pages fetch JSON content from the back-end server as well. That JSON itself can regularly be produced using Perl and BixChange. You just have to change the Content-Type for the output (see main6.ini or main7.ini examples for setting the custom_report_header) and use a JSON template instead of HTML. Autogenerate all of your JSON using a cron job scheduled for every five minutes or so if there are any changes.</p>
<p>
In situations when the project is almost over but the company somehow cannot or does not want do do without the supporting system you should be able to port much of hte functionality to <a href="https://metacpan.org/pod/Dancer2" target="blank">Dancer2</a>.
</p>

EOF

[LOOP CF1.4]
TITLE = Read the Tutorials
SUBBYKEY=Why BixChange?
TEXT=<<EOF
   There are tutorials to get you started on <a href="http://www.bixchange.com" target="_blank">bixchange.com</a>.

EOF
[LOOP CF2]
TITLE = Understanding the World Wide Web

TEXT=<<ENDOFTEXT

<p>
We have migrated from a world of simple forms and 'eyeballs' looking at applications to web applications where the main consumers can be human or machine or a hybrid of both. A good example is a web page that fetches JSON in the background. Another example would be an application that expects an API to produce predictable results in some format that does not render very well in a browser.
</p>

<p>
Since you can easily change the Content Type of the output and just place virtually any format in a template file the overall structure of BixChange applications has not changed much to accommodate this shift. The main difference is in the amount of testing. 
</p>


ENDOFTEXT

[LOOP CF3]
TITLE = Installing BixChange
TEXT=<<EOF

Installing BixChange may be different depending upon the server you are planning to use and the webserver you will
be running it on. You will require, at a minimum, a webserver that will allow you to run CGI scripts. 

EOF
[LOOP CF4]
TITLE = Administering BixChange


[LOOP CF4.1]
TITLE = FILTERS
LINKSTO = 004

TEXT=<<ENDOFTEXT

Resource (*.ini) files contain hierarchical data. If you need (or are used to) relational data than keep all
of your data in databases and use XObjects to fetch it out of them. If you are adventuresome and
like challenges, you will keep some of your data in resource files and write filters to weed out
undesireable data from the user. Actually, filters can do more than weed out undesirable data. They
can add data to the rows of data in your dataset or remove items. Here is an example of a typical
filter:
<P>
($key='qm' && $column->{PHONENUMBER}=~m/^312/)
<P>


ENDOFTEXT

[LOOP CF5]
TITLE = Designing an Application

[LOOP CF5.1]
TITLE = REFRESHSPEED
TEXT =<<ENDOFTEXT
 Refresh speed is normally a parameter sent to the browser telling it when to reissue a request
 to refetch the page. On some browsers it looks like a screen flicker. If you are moving down
 a page when one of these refreshes occurs your page will again return to the top of the page
 if there are no anchors in the Location bar of your browser.

ENDOFTEXT

[LOOP CF6]
TITLE = Database Fundamentals

[LOOP CF7]
TITLE = Progression from Resource-File Heavy Implementations
TEXT=<<ENDOFTEXT
<p>The normal design pattern for BixChange is start with a template that looks the way you want and pair that with a few representative resource files with some hard-coded but junk data. Once the formatting looks right either move directly to working with XObjects or continue to modify those resource files by adding evaluated sections and delay writing XObjects until a later time.</p>
<p> When working with XObjects you can subclass XObject (see the /lib directory) and then follow the basic pattern found in /data/m/ma/maccess.ini which instantiates that object, runs its rock() method and passes the results of its roll() method to BixChange's _bankdeposit() method. There's an autoloaded utility for BixChange called _xloader but it is limited in how it can setup your XObject and as such is mainly used when that XObject obtains all of its configuration settings from the environment.
</p>

<p>
You can think of XObjects as BixChange's phone connection to the outside world. You do not have to use them. In fact, most development starts with static key/value entries in a resource file until there is a need to make those values dynamic. At that point the double percentage signs are used to indicate evaluation is needed. There are some example XObjects like XCSV.pm in the /lib directory. </p>
<p>
<p>
While testing or when pressed for time it is perfectly acceptable to just interact with a database and push your resulting data into _bankdeposit() yourself inside of an evaluated value section of a resource file. This will map your data to the template without much additional effort. However, later on you will notice that databases change and your solution is too closely tied to a particular vendor. The XObjects approach works.  
</p>

ENDOFTEXT
[LOOP CF8]
TITLE = Introduction to XObjects

[LOOP CF8.1]
TITLE = Resource Files

[LOOP CF8.2]
TITLE = CSV Data

[LOOP CF8.3]
TITLE = SQL

[LOOP CF8.4]
TITLE = XObjects to the Rescue!

[LOOP CF9]
TITLE = SQL Data Manipulation

[LOOP CF10]
TITLE = Editing Files and Projects
TEXT=<<EOF
   <p>
     There is a tool in the /bin directory called dumona.pl that uses PerlTk but work on it was stalled as most developers were already using Emacs or other editors. Work on dumona has resumed and updated will be forthcoming. Until then continue to use your favorite editors.
   </p>

EOF

[LOOP CF11]
TITLE = Basics
TEXT=<<EOP
<p>
 You get BixChange by downloading it: 
</p>
<pre>
> git clone http://github.com/joellimardo/bixchange
> sudo chmod -R 644 ./bixchange
> sudo chgrp -R www-data ./bixchange
> sudo chmod g+w ./bixchange/log

</pre>
<p>
I would read the install.txt file. Once you get it running there are manual tests you can load from a link on the top right side of the home page. They sort of stink. There are tests that use Test::More in the test/ directory under the installation which will be rewritten so you can just run prove from the main installation folder.  
</p>
<p>
The first thing to understand is that a resource (*.ini) file has to exist somewhere in the data directory where BixChange was installed. Next you have to know that every file in the data directory is placed two folders from the data directory in folders that coorespond to the first two letters of the file's name. So a file called foo.ini would be in a folder called ./data/f/fo. What happens if you like naming files with single letters? The file a.ini could not be found, so at minimum resource files must have two letter names.
</p>
<p>
Next, you have to know that BixChange resource files have an expected format. There are only two types of groups (those things in the square brackets) that are technically valid in the resource file -- one is the GENERAL section and the other are LOOPS. You are not required to have any loops but you must have a GENERAL section. See the examples. Loops are explained later in this helpfile. 
</p>
EOP

[LOOP CF11.1]
TITLE = Templates

[LOOP CF11.2]
TITLE = Passing Parameters to Templates

[LOOP CF12]
TITLE = BixChange Forms
TEXT=<<EOF
  <p>It is kind of easy to build a form in BixChange. Just reuse the example  (<a href="bixchange.cgi?f=form1;tmpl=form1" target="_blank">Sample</a>). Change the form fields in the resource file and fashion the template the way you want or cut/copy/paste the template tags into a different template of your liking.
</p>
<p>
 If you are going to expose this form to untrusted parties try using BixChange's _untaint_param() method to cleanse the input.
</p>
</p>
<p>A closer look at the other contents of the form1.ini will reveal that TEXTAREAs and other complex HTML form objects are all considered RAW types. This pattern can be followed to create numerous forms. Notice the HIDDEN tags in the form1.tmpl. They send the data back to the form1's resource file and template combination for processing in the ACTION_NUEVO element in the resource files GENERAL section.
</p>

EOF

[LOOP CF13]
TITLE = Using Forms to Add or Change Data
TEXT=<<EOP
  <p>Normally you would want to keep user-editable data in a database. There are times when you want to update a resource file using form data but you generally should avoid doing that.</p>
  <p>Here's an example of one of the (many) ways you can work with databases via Perl:</p>
<pre>
CONNECT=&lt;&lt;EOF
     &#37;&#37;
     my ($dbh, $status);
     $status = 'dbmanagemain ran.'; 
     use IO::DB;
     my ($dsn, $usr, $pss) = ( (BixChange::persist('DBIDSN')), 
                               (BixChange::persist('DBIUSR')),
                               (BixChange::persist('DBIPSS'))
                             );
     my $db = new IO::DB( {db_dsn => $dsn,
                           db_user => $usr,
                           db_pass => $pss});
     

     #Loop over for all of these
     my $h = $db->sql_hash(
                      BixChange::_bxstore('SQLTARGET')
                      ||
                      "select * from public.atbl");

    #push all of this to structures that will populate/update for Vue to
    #take over
    for(keys %$h){
         $status .= $_ . ' ' . $h->{$_};
    };
    $status;
    &#37;&#37;
EOF
</pre>
<p>
Notice that the above just reads from the database. It is customary to avoid reading and writing at the same time. BixChange allows you to order execution of resource files using POMs. So the above would be called via bixchange.cgi?pom=yourpackagename;iid=rule1 and the POM file would specify that rule1 call f1=updatetable&f2=readresults for instance. Eventually you will want to cleanse input and add a flag (using _bxstore()) that the request input is okay and that subsequent operations can proceed with updates/deletes/etc.  
</p>
EOP

[LOOP CF14]
TITLE = Form Data Validation
TEXT=<<EOP
Validating form data is relatively simple with BixChange. The forms themselves are typically contained in resource (*.ini) files with the following keys: NAME, DISPLAYNAME, TYPE, LENGTH, VALUE, and UNTAINT. The UNTAINT key is the most important. The standard way is to 'depollute' the parameters by applying whatever you placed in the UNTAINT key against each value, like so:
<pre>
      my $parent;
      my $xINIRef = BixChange::get_private('PARENT');
      my $depol = $xINIRef->depollute('WBFRM', 
 		    [qw|NAME
			TITLE
			COMPANY 
			ADDRESS 
			ADDRESS2 
			CITY 
			STATE 
			ZIP 
			PHONE 
			PHONE1 
			PHONE2 
			FAX 
			FAX1 
			FAX2 
			EMAIL 
			WEBSITE|]);
	if ($depol){
        ....
        }
     
</pre>
In the above example $depol will be filled with a hash of values that are no longer tainted. Why? Because the regular expression specified in the UNTAINT element was sufficient to extract what was needed.

       
EOP
[LOOP CF15]
TITLE = Debugging and Trouble Shooting
TEXT=<<EOF
  <p>The first place to look for errors with BixChange is the /log/error.log file where it is installed. The next place is the log file generated by the webserver (for Apache it would be /var/log/apache2/error.log or something similar).</p>
<p>
Over the years I have rarely had to use the Perl debugger. I used to live in it only to realize that it had become a bit of a crutch. If you are building on top of well-tested modules that behave and error-out in established ways you can normally add a few lines to some evaluated block in a resource file and then you are done. In other words if you are putting lots of code in an evaluated block you are doing it wrong.  
</p>
<p>
First, rely heavily on <a href="http://www.metacpan.org" target="blank">CPAN</a> modules. Seriously look to see if something you are trying to do has already been done and just grab that solution. 
</p>
<p>
There's a feature called trace logging in BixChange but you should not need it and is mainly for advanced users. Stick to CPAN modules with good documentation and/or write your own modules. The goal is to write structured content and add <i>code snippets</i> when necessary. Try not to go overboard.
</p>
<p>
If you find that you absolutely must write a bunch of code (classes, etc.) then use one of the Inline modules available. I've used Inline::C and Inline::CPP before. There is even Inline::Java and Inline::MonoCS if that is your fancy. 
</p>

</ul>
EOF

[LOOP CF16]
TITLE = Advanced Bixchange
TEXT=<<EOF
  <p>
    The weird way of arranging resource files (f1, f2...fn) is not by accident. There are patterns at work here. Try to break your code into smaller, reusable chunks that can be rearranged. So for instance, if you start writing code and putting it all in a single resource file ask yourself how you would execute your code in reverse? What if one or more of your dependencies changed? 
  </p>
<p>
A good way to think about it is to envision your solution being run from the command line and each small resource querying the system's state in order to know what to do.
</p>

EOF

[LOOP CF17]
TITLE = Correct File Locations
TEXT=<<EOF
  <p> All files have a 'place' in BixChange. The top level folders directly under the bixchange directory are for the vendor. You should not be putting much in there except for testing purposes with the exception of /DOCS and /lib folders that require symlinks to package equivalents for live use (see the tutorials at the <a href="http://www.bixchange.com" target="blank">BixChange.com</a> website for details. Here are the normal file locations:</p>
<ul>
  <li> Resource file: Under the /data folder.</li>
  <li> Data files of various sorts (CSV for instance) goes in the  /data top level folder (not subfolders).</li>
  <li> Templates all must be under /tmpl</li>
  <li> XObjects go under /lib as do .endl files.</li>
  <li> Test files go in the /test folder, have a .t extension, use Test::More and should be runnable via <i>prove</i> in the bixchange directory.</li>
  <li> Any CPAN modules go under /lib/cpan.</li>
  <li> CSS and JS files normally go in the /DOCS (it is upper case) folder and are symlinked or just copied to some accessible place on the webserver.</li>
</ul>

EOF
[LOOP CF18]
TITLE = Advanced BixChange Templates
TEXT=<<EOP
  The correct way to design templates in BixChange is to plan out the design before hand and try to implement your pages in regions.  Your page regions can exist in other templates that can be included using the TMPL_INCLUDE tag or by using TMPL_IF blocks. TMPL_IFs are great for changing an existing template to accomodate a new regions.
EOP
[LOOP CF19]
TITLE = Advanced Forms
TEXT=<<EOF
<p>
There is filtering capability inside of BixChange for resource files but in practice it has proven easier to set GENERAL parameters and use TMPL_IF statements in the templates to weed out form fields you do not want the user to see. That way you can produce a wide variety of effects on forms without having to produce lots of different, redundant resource files.
</p>

EOF
[LOOP CF20]
TITLE = Interacting with Email
TEXT=<<EOF
  This will depend on how you send e-mail, but the method is very similar in all cases and not unique to BixChange.  Perl offers lots of different methods for both sending and reading e-mail.  The most common program for sending SMTP (Simple Mail Transport Protocol) mail is the Net::SMTP module.  Otherwise, if you are on Windows, you can use the Win32 module or others to access Outlook or CDO classes for sending mail.
EOF

[LOOP ACF21]
TITLE = Online Commerce
TEXT=<<EOP
  BixChange includes facilities to build customized, session-based solutions for online shopping carts and web based commerce systems.
<P />
<a href="bixchange.cgi?f=store;tmpl=store" target="_blank">A simple example</a> shows how easy this is to set up.  

EOP

[LOOP CF22]
TITLE = Transaction Processing
TEXT=<<EOP
  With BixChange, transactions typically take place in the database.  As an application developer using BixChange, your biggest issues in this regard will be a) which database to use to achieve transactions (some do not support them) and b) how to ensure that you do not have a 'dirty read'. With a dirty read, the data originally sent from BixChange will have been changed by another user or process prior to the update. Here is an example:
<P />
<ul>
<li>User A reads 100 from a table that he intends to update to 105</li>
<li>User B updates the original 100 to 108</li>
<li>User A then updates the value to 105</li>
</ul>  

The net result? User B's values are overwritten.  In order to avoid this, timestamps can be used in the database.  These timestamps can be returned with the original data at a row level, indicating the last time the data has been updated.  When a new update request is issued, the timestamps passed in can be checked. If they are not the same, the data has been updated and those rows can be returned to the user for further modification.
<P />
There are important reasons to think carefully through locking procedures in BixChange. Here is an article on the subject specific to locking <a href="http://modperlbook.org/html/ch20_01.html#pmodperl-CHP-20-ITERM-5407" target="_blank">databases under mod_perl</a>.

EOP
[LOOP CF23]
TITLE = Web Appication Framework
TEXT=<<EOP
<p>
  BixChange is a web application framework. If offers a way to separate content from the formatting necessary to make that content available to various consumers, particularly (but not limited to) browsers.  It can be used as a lightweight content management system for small teams which was the original intended user base. </p>
<p>
When pressed for time one could keep all of your information in resource files without a database. Another option is to use BixChange's persistence and keep data in the key/value GDBM database. A third option is to store data in an RDBMS like PostgreSQL and use DBI or another database manipulation utility to create, read, update, and delete records. 
</p> 
EOP
[LOOP CF23.1]
TITLE = Addressing the Web's Statelessness

[LOOP CF24]
TITLE = Session Variables and Cookies
TEXT=<<EOF
  All cookies, if received, are stored in $bix{'PRIVATE' . get_runid()}->{'USERCOOKIES'} which is captured every time another resource is requested from BixChange. Individual applications designed with BixChange simply use that or the conventional CGI::Cookie module to retrieve cookies passed in by the user.  Cookies are great, but they have a limited amount of information that can be stored in them. Furthermore, different browsers do not share cookies, so if you have an application that requires the user to open a special browser due to plugin restrictions or other incompatibilities, they will lose access to all of the cookie data for the previous session.
<P />
Session control is typically handled server-side using CGI::Session. BixChange comes with functions to handle sessions that utilize files for storage (inititiate_session() particularly).

EOF


[LOOP CF25]
TITLE = File Manipulation
TEXT=<<EOF
  Files are easy to manipulate in Perl, BixChange's native language. All that is needed is an <pre>open($f, '<' ,"filename.txt") or die $!</pre> type of command to accomplish this.  Perl also has methods for file locking (flock()), which are easy to use and understand. File handles can be opened, manipulated, shared between function calls, and more. Please refer to standard Perl documentation for file manipulation techniques.

EOF


[LOOP CF26]
TITLE = Full Text Searching with File::Find
TEXT=<<EOF
  There are other ways to search for files, particulary using grep, but if you want a Perl way, you can use the File::Find module. The utils.pl script which comes with BixChange uses File::Find to locate certain tags that should exist in certain resource (*.ini) files to create an index.  For an example, use <pre>perl utils.pl --index</pre>
EOF

[LOOP CF27]
TITLE = Simple User Access Control
TEXT=<<EOF

<p>
Normally solutions in BixChange are simply implemented with file-level access control. BixChange has the _validate_user() function which compares a passed-in username, password, and filename to be used. The password files typically look as follows:</p>

<pre>
[GENERAL]
REFRESHSPEED=9999999

[LOOP USERS1]
NAME=MAXXO
PASSWORD=ThUrTgvMWwwbI
</pre>

Passwords are encrypted using Perl's crypt function.  In order to create a new password, using BixChange's configured salt (which you can change in BixConfig), use the utils.pl password function, as follows:
<pre>
perl utils.pl --password newpassword
zmnU1Cg0f4teo
</pre>
If you are really interested in securing the user's identity you will accept the user's password via a secure (SSL) session, capturing the user's password and issuing them a unique session key via CGI::Session.
EOF
[LOOP CF28]
TITLE = Mime Types

[LOOP CF29]
TITLE = Graphing with GD

[LOOP CF30]
TITLE = XObjects

[LOOP CF31]
TITLE = Version Control
TEXT=<<EOT
<p>
Since virtually everything is stored in a file it is prudent to keep BixChange modules in a versioning system. 
</p>
 

EOT
[LOOP CF32]
TITLE = Event Scheduling

[LOOP ACF33]
TITLE = Hah, hah, hah...Custom Tags!?!?

[LOOP ACF34]
TITLE = Interfacing with COM and DCOM

[LOOP CF35]
TITLE = The BixChange API

[LOOP ACF36]
TITLE = If You Want a Function Reference, Use PerlDoc Already
